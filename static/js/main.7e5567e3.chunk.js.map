{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","console","log","target","value","setState","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE1B,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACE,6BAAKF,IACL,4BAAIC,WCQGK,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OACE,cAAC,EAAD,CAEET,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAOrB,OAAO,8BAAMM,KCJAI,EARG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKX,UAAU,MAAf,SACE,uBAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCK/FI,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAAnE,SACGJ,EAAMK,YCyCEC,E,kDAxCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEnB,YAAac,EAAMG,OAAOC,SAd1C,EAAKE,MAAQ,CACX1B,OAAQ,GACRM,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBqB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKN,SAAS,CAAEzB,OAAQ+B,S,oBAQ7C,WAAU,IAAD,OACDC,EAAiBC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAClC,GAC/C,OAAOA,EAAOP,KACX0C,cACAC,SAAS,EAAKV,MAAMpB,YAAY6B,kBAErC,OAAiC,IAA7BF,KAAKP,MAAM1B,OAAOqC,OACb,4CAGL,sBAAKzC,UAAU,KAAf,UACE,4CACA,cAAC,EAAD,CAAWW,aAAc0B,KAAKd,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnB,OAAQgC,a,GAlCZM,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7e5567e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\r\n  return(\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={robots[i].id}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      ></Card>\r\n    );\r\n  });\r\n  return <div>{cardArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}></input>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border:\"1px solid black\", height:\"800px\"}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Scroll from \"./Scroll\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    console.log(event.target.value);\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robots) => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading...</h1>;\r\n    } else\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1>RoboFrends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}